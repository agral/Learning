<!DOCTYPE html>
<html lang="en">
    <head>
        <meta charset="UTF-8">
        <meta name="viewport" content="width=device-width, initial-scale=1">
        <title>Home</title>
        <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.3/dist/css/bootstrap.min.css" rel="stylesheet"
            integrity="sha384-QWTKZyjpPEjISv5WaRU9OFeRpok6YctnYmDr5pNlyT2bRjXh0JMhjY6hW+ALEwIH"
            crossorigin="anonymous">
        <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/notie/4.3.1/notie.min.css"
            integrity="sha512-UrjLcAek5jbj1vwGbXkviPHtgSNVNQCedX7cBIMDdSI2iZtUcZcoTh2Sqc8R9mVcijOjFUi1IlxhfrE1uWaIog==" crossorigin="anonymous" referrerpolicy="no-referrer" />

        <style>
            .chatbox {
                outline: 1px solid silver;
                min-height: 160px;
                padding: 0.5rem;
            }
        </style>
    </head>
    <body>
        <div class="container">
            <div class="row">
                <div class="col">
                    <h1 class="mt-3">This is the home page</h1>
                    <hr/>

                </div>
            </div>
            <div class="row">
                <div class="col-md-8">
                    <h3>Chat</h3>
                    <div class="form-group">
                        <label for="username">Username:</label>
                        <input type="text" name="username" id="username" class="form-control" autocomplete="off">
                    </div>
                    <div class="form-group">
                        <label for="message">Message:</label>
                        <input type="text" name="message" id="message" class="form-control" autocomplete="off">
                    </div>

                    <hr/>
                    <a href="javascript:void(0);" id="sendBtn" class="btn btn-outline-secondary">Send Message</a>
                    <input type="hidden" name="action" id="action">

                    <div id="status" class="mt-2 float-end">
                    </div>

                    <div id="output" class="chatbox mt-3">
                    </div>
                </div>
                <div class="col-md-4">
                    <h3>Who's Online</h3>
                    <ul id="online_users"></ul>
                </div>
            </div>
        </div>
    </body>

    <script>
        let socket = null
        const o = document.getElementById("output")
        const userField = document.getElementById("username")
        const messageField = document.getElementById("message")

        window.onbeforeunload = function() {
            console.log("Leaving")
            let jsonData = {};
            jsonData["action"] = "left";
            socket.send(JSON.stringify(jsonData))
        }

        document.addEventListener("DOMContentLoaded", function(){
            socket = new ReconnectingWebSocket("ws://127.0.0.1:8080/ws", null, {
                debug: true, // TODO: switch to false when moving to production
                reconnectInterval: 3000
            })
            const offline = `<span class="badge bg-danger">Not connected</span>`
            const online = `<span class="badge bg-success">Connected</span>`
            let statusDiv = document.getElementById("status")
            socket.onopen = () => {
                console.log("Successfully connected to a websocket")
                statusDiv.innerHTML = online;
            }
            socket.onclose = () => {
                console.log("Socket connection closed")
                statusDiv.innerHTML = offline;
            }
            socket.onerror = error => {
                console.log("There was an error")
                statusDiv.innerHTML = offline;
            }
            socket.onmessage = msg => {
                let data = JSON.parse(msg.data)
                console.log("Action is", data.action)
                switch(data.action) {
                    case "list_users":
                        let ulist = document.getElementById("online_users")
                        while (ulist.firstChild) {
                            ulist.removeChild(ulist.firstChild)
                        }

                        console.log(data.connected_users)
                        if (data.connected_users.length > 0) {
                            data.connected_users.forEach(function(item) {
                                let li = document.createElement("li");
                                li.appendChild(document.createTextNode(item))
                                ulist.appendChild(li)
                            })
                        }
                        break;

                    case "broadcast":
                        o.innerHTML = o.innerHTML + data.message + "<br>"
                }
            }

            userField.addEventListener("change", function() {
                let jsonData = {}
                jsonData["action"] = "username"
                jsonData["username"] = this.value
                socket.send(JSON.stringify(jsonData))
            })

            messageField.addEventListener("keydown", function(event) {
                if (event.code === "Enter") {
                    if (!socket) {
                        console.log("No connection")
                        return false
                    }
                    event.preventDefault()
                    event.stopPropagation()

                    if ((userField.value === "") || (messageField.value === "")) {
                        showErrorAlert("Please fill out user and message fields")
                        return false;
                    }
                    sendMessage()
                    return true
                }
            })

            document.getElementById("sendBtn").addEventListener("click", function() {
                if ((userField.value === "") || (messageField.value === "")) {
                    showErrorAlert("Please fill out user and message fields")
                    return false;
                }
                sendMessage()
                return true
            })
        })

        function sendMessage() {
            let jsonData = {};
            jsonData["action"] = "broadcast"
            jsonData["username"] = userField.value
            jsonData["message"] = messageField.value
            socket.send(JSON.stringify(jsonData))
            messageField.value = "";
        }

        function showErrorAlert(msg) {
            notie.alert({
              type: "error",
              text: msg,
            })
        }
    </script>
    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.3/dist/js/bootstrap.bundle.min.js"
        integrity="sha384-YvpcrYf0tY3lHB60NNkmXc5s9fDVZLESaAA55NDzOxhy9GkcIdslK1eN7N6jIeHz"
        crossorigin="anonymous"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/notie/4.3.1/notie.min.js"
        integrity="sha512-NHRCwRf2LnVSlLDejCA9oS3fG3/FLSQIPCjAWl3M7tVi5wszwr6FxkjotWnQDXLE+aLKcxRrzFDNEgXj9nvkPw==" crossorigin="anonymous" referrerpolicy="no-referrer"></script>
    <script src="/static/reconnecting-websocket.min.js"></script>
</html>
